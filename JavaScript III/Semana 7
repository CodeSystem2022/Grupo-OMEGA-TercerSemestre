class Persona{ //Clase padre
    constructor (nombre, )
    this._nombre = nombre;
    this._ apellido = apellido;
  }
get nombre(){
    return this._nombre;
  }
set nombre(nombre){
    this._nombre = nombre;
  }
get apellido(){
    return this. apellido
  }
set apellido (apellido){
 this. apellido = apellido;
  }
nombreCompleto(){
    return this ._nombre+'   '+this._apellido;
  }
toString(){  // regresa un String
    return this.nombreCompleto();
 }
}

class Empleado extends Persona{ //Clase hija
    constructor (nombre, apellido, departamento){
    super (nombre, apellido);
    this._departamento departamento;
} 

get departamento(){
    return this._departamento;
}
set departamento (departamento){
    this._departamento departamento;
}

//Sobreescritura
nombreCompleto(){
    return super.nombreCompleto()+', '+this._departamento;
 }
}
Let personal = new Persona('Martín', 'Perez');
console.log(personal.nombre); Martín
personal.nombre = Juan Carlos';
console.log(personal.nombre); Juan Carlos
//console.log(personal1);
Let persona2 = new Persona('Carlos', 'Lara');
console.log(persona2.nombre); Carlos
persona2.nombre = 'María Laura';
console.log(persona2.nombre); María Laura
//console.log(persona2);

Let empleado1 = new Empleado('María', 'Gimenez', 'Sistemas');
console.log(empleado1); Empleado {_nombre: 'María', apellido: 'Gimenez', _departamento: 'Sistemas' }
console.log(empleado1.nombreCompleto()); María Gimenez, Sistemas

//Object.prototype.toString Esta es la manera de acceder a atributos y métodos de manera dinamica
console.log(empleado1.toString()); María Gimenez, Sistemas
