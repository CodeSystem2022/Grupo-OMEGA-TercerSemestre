import psycopg2 as bd
 # psycopg2 as db otra manera de importar el psycopg2
from logger_base import log
import sys


class Conexion:
    _DATABASE= "test_bd"
    _USERNAME = "postgres"
    _PASSWORD = "admin"
    _DB_PORT= '5432'
    _HOST = '127.0.0.1'
    _conexion = None
    _cursor = None

@classmethod
def obtenerConexion(cls):
    if cls._conexion is None:
        try:
            cls._conexion = bd.connect(host=cls._HOST,
                                       user=cls._USERNAME,
                                       password=cls._PASSWORD,
                                       port=cls._DB_PORT,
                                       database=cls._DATABASE)
            log.debug(f'Conexi贸n Exitosa: {cls._conexion}')
            return cls._conexion
        except Exception as e:
            log.error(f'Ocurri贸 un error: {e}')
            sys.exit()
    else:
         return cls._conexion
@classmethod
def obtenerCursor(cls):
   if cls._cursor is None:
       try:
           cls._cursor = cls.obtenerConexion().cursor()
           log.debug(f'Se abri贸 corectamente el cursor: {cls._cursor}')
           return cls._cursor
       except Exception as e:
           log.error(f'Ocurri贸 un error: {e}')
           sys.exit()
   else:
        return cls._cursor

# metodo de clase para obtener el pool de conexiones
@classmethod
def obtenerPool(cls):
   if cls._pool is None:
        try:
            cls._pool = pool.SimpleConnectionPool(cls._MIN_CON,
                                                      cls._MAX_CON,
                                                      host=cls._HOST,
                                                      user=cls._USERNAME,
                                                      password=cls._PASSWORD,
                                                      port=cls._DB_PORT,
                                                      database=cls._DATABASE)
                log.debug(f"Creacion de pool de conexiones exitosa: {cls._pool}")
                return cls._pool  # retornamos el pool
            except Exception as e:
                log.error(f"Ocurrio un error al obtener el pool de conexiones: {e}")
                sys.exit()
   else:
        return cls._pool   

    # metodo de clase para liberar una conexion del pool
   @classmethod
   def liberarConexion(cls, conexion):
        cls.obtenerPool().putconn(conexion)
        log.debug(f"Regresamos la conexion del pool: {conexion}")

    # metodo para cerrar todas las conexiones del pool
    @classmethod
    def cerrarConexiones(cls):
        cls.obtenerPool().closeall()  # metodo closeall() realiza un cierre total de las conexiones

if __name__ == '__main__':
    Conexion1 = Conexion.obtenerConexion()
    Conexion.liberarConexion(conexion1)
